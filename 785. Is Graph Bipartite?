#color
from collections import deque
class Solution(object):
    def isBipartite(self, graph):
        """
        :type graph: List[List[int]]
        :rtype: bool
        """
        colors = [0] * len(graph)
        q = deque()
        for node, connects in enumerate(graph):
            if colors[node] == 0:
                q.append([node, 1])
                while len(q) != 0:
                    curr, color = q.popleft()
                    if colors[curr] == -color:
                        return False
                    elif colors[curr] == color:
                        continue
                    colors[curr] = color
                    for connect in graph[curr]:
                        q.append([connect, -color])
        return True




#my own
from collections import deque
class Solution:
    def isBipartite(self, graph):
        """
        :type graph: List[List[int]]
        :rtype: bool
        """
        if len(graph) == 0:
            return True
        
        visited = set()
        def helper(node):
            if node in visited:
                return
            visited.add(node)
            for connected in graph[node]:
                helper(connected)
                
        q = deque()
        for node in range(len(graph)):
            if node not in visited:
                q.append([node, True])
                helper(node)
        
        setA = set()
        setB = set()
        visited = set()

        while len(q) != 0:
            node, isA = q.popleft()
            if isA:
                setA.add(node)
            else:
                setB.add(node)
            if node in visited:
                continue
            visited.add(node)
            for connected in graph[node]:
                q.append([connected, not isA])
        if len(setA & setB) != 0:
            return False
        return True
