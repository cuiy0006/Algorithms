# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        def helper(node, lst):
            if node == None:
                lst.append('#')
                return
            lst.append(str(node.val) + '*')
            helper(node.left, lst)
            helper(node.right, lst)
        res = []
        helper(root, res)
        return ''.join(res)
        

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        def helper(data, index):
            if data[index] == '#':
                return (None, index)
            value = ''
            while data[index] != '*':
                value += data[index]
                index += 1
            node = TreeNode(int(value))
            node.left, index = helper(data, index + 1)
            node.right, index = helper(data, index + 1)
            return (node, index)
        return helper(data, 0)[0]
        

# Your Codec object will be instantiated and called as such:
# codec = Codec()
# codec.deserialize(codec.serialize(root))
