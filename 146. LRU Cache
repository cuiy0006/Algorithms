PREV,NEXT,KEY,VAL = 0,1,2,3
class LRUCache(object):

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.key_map = {}
        self.cap = capacity
        self.root = []
        self.root[:] = [self.root, self.root, None, None]
        

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        key_map, root, cap = self.key_map, self.root, self.cap
        if key not in key_map:
            return -1
        node = key_map[key]
        node[NEXT][PREV], node[PREV][NEXT] = node[PREV], node[NEXT]
        root[PREV][NEXT], root[PREV], node[NEXT], node[PREV] = node, node, root, root[PREV]
        return node[VAL]
        

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: void
        """
        key_map, root, cap = self.key_map, self.root, self.cap
        if cap == 0:
            return
        if key in key_map:
            key_map[key][VAL] = value
            self.get(key)
        else:
            if cap == len(key_map):
                evict_node = root[NEXT]
                evict_node[NEXT][PREV], evict_node[PREV][NEXT] = evict_node[PREV], evict_node[NEXT]
                del key_map[evict_node[KEY]]
            node = [None, None, key, value]
            #root[PREV], root[PREV][NEXT], node[NEXT], node[PREV] = node, node, root, root[PREV]
            root[PREV][NEXT], root[PREV], node[PREV], node[NEXT] = node, node, root[PREV], root
            key_map[key] = node
            


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
