LAST, NEXT, KEY, VAL = 0, 1, 2, 3
class LRUCache:

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.cap = capacity
        self.dic = {} #key -> node: [LAST, NEXT, KEY, VAL]
        self.root = []
        self.root[:] = [self.root, self.root, None, None]
        

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        dic, root, cap = self.dic, self.root, self.cap
        if key not in dic:
            return -1
        node =dic[key]
        node[NEXT][LAST], node[LAST][NEXT] = node[LAST], node[NEXT]
        root[LAST][NEXT], root[LAST], node[LAST], node[NEXT] = node, node, root[LAST], root
        return node[VAL]

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: void
        """
        dic, root, cap = self.dic, self.root, self.cap
        if cap == 0:
            return
        if key in dic:
            self.get(key)
            dic[key][VAL] = value
            return
        if cap == len(dic):
            evict = root[NEXT]
            evict[NEXT][LAST], evict[LAST][NEXT] = evict[LAST], evict[NEXT]
            del dic[evict[KEY]]
        
        node = [None, None, key, value]
        root[LAST][NEXT], root[LAST], node[LAST], node[NEXT] = node, node, root[LAST], root
        dic[key] = node
        
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
