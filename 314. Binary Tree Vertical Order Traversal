# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
from collections import deque
class Solution(object):
    def verticalOrder(self, root):
        """
        :type root: TreeNode
        :rtype: List[List[int]]
        """
        if root == None:
            return []
        
        node = root
        left = 0
        right = 0
        q = deque([(0, root)])
        while len(q) != 0:
            depth, node = q.popleft()
            left = min(left, depth)
            right = max(right, depth)
            if node.left != None:
                q.append((depth - 1, node.left))
            if node.right != None:
                q.append((depth + 1, node.right))
        
        leftlst = [[] for i in range(-left)]
        rightlst = [[] for i in range(right)]
        rootlst = []

        q = deque([(0, root)])
        while len(q) != 0:
            depth, node = q.popleft()
            if depth == 0:
                rootlst.append(node.val)
            elif depth < 0:
                leftlst[-depth - 1].append(node.val)
            else:
                rightlst[depth - 1].append(node.val)
            
            if node.left != None:
                q.append((depth - 1, node.left))
            if node.right != None:
                q.append((depth + 1, node.right))
        leftlst.reverse()
        return leftlst + [rootlst] + rightlst
