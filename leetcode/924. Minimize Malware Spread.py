class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        parent = {node:node for node in range(n)}
        def find_ancestor(node):
            if parent[node] == node:
                return node
            parent[node] = find_ancestor(parent[node])
            return parent[node]
        
        for i in range(n):
            for j in range(n):
                if graph[i][j] == 1:
                    parent[find_ancestor(i)] = find_ancestor(j)

        ancestor_to_cnt = {}
        for node in range(n):
            ancestor = find_ancestor(node)
            if ancestor not in ancestor_to_cnt:
                ancestor_to_cnt[ancestor] = 0
            ancestor_to_cnt[ancestor] += 1

        exclude = set()
        seen = set()
        for node in initial:
            ancestor = find_ancestor(node)
            if ancestor in seen:
                exclude.add(ancestor)
            else:
                seen.add(ancestor)

        max_cnt = 0
        res = sys.maxsize
        for node in initial:
            ancestor = find_ancestor(node)
            if ancestor in exclude:
                continue
            if ancestor_to_cnt[ancestor] > max_cnt:
                max_cnt = ancestor_to_cnt[ancestor]
                res = node
            elif ancestor_to_cnt[ancestor] == max_cnt:
                res = min(res, node)
        
        if res == sys.maxsize:
            return min(initial)
        return res
