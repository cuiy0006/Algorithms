class Trie(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.dic = {} #key -> [isEnd, {}]

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        dic = self.dic
        for i, c in enumerate(word):
            if c not in dic:
                dic[c] = [False, {}]
            if i == len(word) - 1:
                dic[c][0] = True
            dic = dic[c][1]
            
    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        dic = self.dic
        for i, c in enumerate(word):
            if c not in dic:
                return False
            if i == len(word) -1 and not dic[c][0]:
                return False
            dic = dic[c][1]
        return True
        

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        dic = self.dic
        for i, c in enumerate(prefix):
            if c not in dic:
                return False
            dic = dic[c][1]
        return True
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
