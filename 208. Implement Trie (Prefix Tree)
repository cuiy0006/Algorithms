class Trie(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.dic = {}
        self.empty = False
        # key: char, value: [dic, isEnd]
        

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        if word == '':
            self.empty = True
        curr = self.dic
        for i,c in enumerate(word):
            if c not in curr:
                curr[c] = [{}, False]
            if i == len(word) - 1:
                curr[c][1] = True
            curr = curr[c][0]

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        if word == '':
            return self.empty
        curr = self.dic
        for i, c in enumerate(word):
            if c not in curr:
                return False
            if i == len(word) - 1:
                if not curr[c][1]:
                    return False
            curr = curr[c][0]
        return True

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        curr = self.dic
        for i, c in enumerate(prefix):
            if c not in curr:
                return False
            curr = curr[c][0]
        return True


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
